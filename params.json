{"name":"Overcast","tagline":"A simple, SSH-based cloud management CLI.","body":"# ![Overcast Logo](http://i.imgur.com/eCBl2NI.png)\r\n\r\nOvercast is a simple, SSH-based cloud management CLI that was designed to make it easy to spin up and manage clusters of servers in a consistent, scriptable way.\r\n\r\n![Screenshot](http://i.imgur.com/qWUV684.png)\r\n\r\n## Concepts\r\n\r\n1. **Instances** are any machine you can SSH into. Instances can be local or remote, virtual or physical. Each instance has a name, IP, SSH key and port.\r\n2. **Clusters** are sets of instances.\r\n\r\n## Features\r\n\r\n- Define clusters and instances using the command line or by editing a simple JSON file.\r\n\r\n  ```sh\r\n  $ overcast cluster create db\r\n  $ overcast cluster create app\r\n  $ overcast instance import app.01 --cluster app --ip 127.0.0.2 \\\r\n    --ssh-port 22222 --ssh-key $HOME/.ssh/id_rsa\r\n  $ overcast instance import app.02 --cluster app --ip 127.0.0.3 \\\r\n    --ssh-port 22222 --ssh-key $HOME/.ssh/id_rsa\r\n  ```\r\n\r\n- Create, snapshot and destroy instances on DigitalOcean (EC2/Linode support is on the roadmap).\r\n\r\n  ```sh\r\n  # Create a new Ubuntu 12.04 instance:\r\n  $ overcast digitalocean create db.01 --cluster db\r\n  # Configure the instance to your liking:\r\n  $ overcast run db.01 install/core install/redis\r\n  $ overcast expose db.01 22 6379\r\n  # Create a snapshot:\r\n  $ overcast digitalocean snapshot db.01 my.db.snapshot\r\n  # Spin up a cluster using your snapshot:\r\n  $ overcast digitalocean create db.02 --cluster db --image-name my.db.snapshot\r\n  $ overcast digitalocean create db.03 --cluster db --image-name my.db.snapshot\r\n  $ overcast digitalocean create db.04 --cluster db --image-name my.db.snapshot\r\n  ```\r\n\r\n- Run commands or script files across any number of servers. Commands can be run sequentially or in parallel.\r\n\r\n  ```sh\r\n  $ overcast run db install/core install/redis\r\n  $ overcast run all uptime \"free-m\" \"df -h\" --parallel\r\n  ```\r\n\r\n- Push and pull files between your local machine and an instance, a cluster, or all clusters. Dynamically rewrite file paths to include the instance name.\r\n\r\n  ```sh\r\n  $ overcast push app nginx/myapp.conf /etc/nginx/sites-enabled/myapp.conf\r\n  $ overcast pull all /etc/nginx/sites-enabled/myapp.conf nginx/{instance}.myapp.conf\r\n  ```\r\n\r\n- Overcast is a thin wrapper around your native SSH client, and doesn't install or leave anything on the servers you communicate with.\r\n\r\n- A [script library](https://github.com/andrewchilds/overcast/tree/master/scripts) and [recipe library](https://github.com/andrewchilds/overcast/tree/master/recipes) are included to make it easy to deploy common software stacks and applications. The library was written for Ubuntu servers, but could be extended to include other distributions.\r\n\r\n## Installation\r\n\r\n1. Install [Node.js](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager) if not already installed.\r\n\r\n2. Install Overcast using npm.\r\n\r\n    ```sh\r\n    $ npm -g install overcast\r\n    ```\r\n\r\n3. You can now use Overcast from any directory.\r\n\r\n    ```sh\r\n    $ overcast help\r\n    ```\r\n\r\n## Configuration\r\n\r\nOvercast looks for an `.overcast` directory in the current directory, or in some parent directory, otherwise falling back to `$HOME/.overcast`. This allows you to have multiple configurations, and to check your cluster definitions and scripts into a repo, like source code.\r\n\r\nThe command `overcast init` will create a new configuration in the current directory. The config directory looks like this:\r\n\r\n```sh\r\n/.overcast\r\n  /files            # Files to be pushed to / pulled from instances\r\n  /keys             # SSH keys, can be your own or auto-generated by overcast\r\n    overcast.key\r\n    overcast.key.pub\r\n  /scripts          # Scripts to be run on instances\r\n  clusters.json     # Cluster/instance definitions (see example.clusters.json)\r\n  variables.json    # API keys, etc (see example.variables.json)\r\n```\r\n\r\n## API Documentation\r\n\r\n### overcast cluster\r\n\r\n```\r\n  overcast cluster count [name]\r\n    Return the number of instances in a cluster.\r\n\r\n    Example:\r\n    $ overcast cluster count db\r\n    > 0\r\n    $ overcast instance create db.01 --cluster db\r\n    > ...\r\n    $ overcast cluster count db\r\n    > 1\r\n\r\n  overcast cluster create [name]\r\n    Creates a new cluster.\r\n\r\n    Example:\r\n    $ overcast cluster create db\r\n\r\n  overcast cluster rename [name] [new-name]\r\n    Renames a cluster.\r\n\r\n    Example:\r\n    $ overcast cluster rename app-cluster app-cluster-renamed\r\n\r\n  overcast cluster remove [name]\r\n    Removes a cluster from the index. If the cluster has any instances\r\n    attached to it, they will be moved to the \"orphaned\" cluster.\r\n\r\n    Example:\r\n    $ overcast cluster remove db\r\n```\r\n\r\n### overcast completions\r\n\r\n```\r\n  overcast completions\r\n    Return an array of commands, cluster names, and instance names for use\r\n    in bash tab completion.\r\n\r\n    To enable tab completion in bash, add this to your .bash_profile:\r\n\r\n    _overcast_completions() {\r\n      local cur=${COMP_WORDS[COMP_CWORD]}\r\n      COMPREPLY=($(compgen -W \"`overcast completions`\" -- \"$cur\"))\r\n      return 0\r\n    }\r\n    complete -F _overcast_completions overcast\r\n```\r\n\r\n### overcast digitalocean\r\n\r\n```\r\n  These functions require the following values set in .overcast/variables.json:\r\n    DIGITALOCEAN_CLIENT_ID\r\n    DIGITALOCEAN_API_KEY\r\n\r\n  overcast digitalocean create [name] [options]\r\n    Creates a new instance on DigitalOcean.\r\n\r\n    The instance will start out using the auto-generated SSH key found here:\r\n    /path/to/.overcast/keys/overcast.key.pub\r\n\r\n    You can specify region, image, and size of the droplet using -id or -slug.\r\n    You can also specify an image or snapshot using --image-name.\r\n\r\n      Option               | Default\r\n      --cluster CLUSTER    |\r\n      --ssh-port PORT      | 22\r\n      --region-slug NAME   | nyc2\r\n      --region-id ID       |\r\n      --image-slug NAME    | ubuntu-12-04-x64\r\n      --image-id ID        |\r\n      --image-name NAME    |\r\n      --size-slug NAME     | 512mb\r\n      --size-id ID         |\r\n\r\n    Example:\r\n    $ overcast instance create db.01 --cluster db --size-slug 1gb --region-slug sfo1\r\n\r\n  overcast digitalocean destroy [instance]\r\n    Destroys a DigitalOcean droplet and removes it from your account.\r\n    Using --force overrides the confirm dialog. This is irreversible.\r\n\r\n      Option               | Default\r\n      --force              | false\r\n\r\n    Example:\r\n    $ overcast digitalocean destroy app.01\r\n\r\n  overcast digitalocean droplets\r\n    List all DigitalOcean droplets in your account.\r\n\r\n  overcast digitalocean images\r\n    List all available DigitalOcean images. Includes snapshots.\r\n\r\n  overcast digitalocean poweron [instance]\r\n    Power on a powered off droplet.\r\n\r\n  overcast digitalocean reboot [instance]\r\n    Reboots a DigitalOcean droplet. According to the API docs, \"this is the\r\n    preferred method to use if a server is not responding.\"\r\n\r\n    Example:\r\n    $ overcast digitalocean reboot app.01\r\n\r\n  overcast digitalocean rebuild [instance] [options]\r\n    Rebuild a DigitalOcean droplet using a specified image name, slug or ID.\r\n    According to the API docs, \"This is useful if you want to start again but\r\n    retain the same IP address for your droplet.\"\r\n\r\n      Option               | Default\r\n      --image-slug SLUG    | ubuntu-12-04-x64\r\n      --image-name NAME    |\r\n      --image-id ID        |\r\n\r\n    Example:\r\n    $ overcast digitalocean rebuild app.01 --name my.app.snapshot\r\n\r\n  overcast digitalocean regions\r\n    List available DigitalOcean regions (nyc2, sfo1, etc).\r\n\r\n  overcast digitalocean resize [name] [options]\r\n    Shutdown, resize, and reboot a DigitalOcean droplet.\r\n    If --skipboot flag is used, the droplet will stay in a powered-off state.\r\n\r\n      Option               | Default\r\n      --size-slug NAME     |\r\n      --size-id ID         |\r\n      --skipBoot           | false\r\n\r\n    Example:\r\n    $ overcast instance resize db.01 --size-slug 2gb\r\n\r\n  overcast digitalocean sizes\r\n    List available DigitalOcean sizes (512mb, 1gb, etc).\r\n\r\n  overcast digitalocean shutdown [instance]\r\n    Shut down a DigitalOcean droplet.\r\n\r\n    Example:\r\n    $ overcast digitalocean shutdown app.01\r\n\r\n  overcast digitalocean snapshot [instance] [snapshot-name]\r\n    Creates a named snapshot of a droplet. This process will reboot the instance.\r\n\r\n    Example:\r\n    $ overcast digitalocean snapshot app.01\r\n\r\n  overcast digitalocean snapshots\r\n    Lists available snapshots in your DigitalOcean account.\r\n```\r\n\r\n### overcast expose\r\n\r\n```\r\n  overcast expose [instance|cluster|all] [port...]\r\n    Reset the exposed ports on the instance or cluster using iptables.\r\n    This will fail if you don't include the current SSH port.\r\n    Specifying --whitelist will restrict all ports to the specified address(es).\r\n    These can be individual IPs or CIDR ranges, such as \"192.168.0.0/24\".\r\n\r\n    Expects an Ubuntu server, untested on other distributions.\r\n\r\n      Option\r\n      --user=NAME\r\n      --whitelist \"IP|RANGE...\"\r\n      --whitelist-PORT \"IP|RANGE...\"\r\n\r\n    Examples:\r\n    # Allow SSH, HTTP and HTTPS connections from anywhere:\r\n    $ overcast expose app 22 80 443\r\n    # Allow SSH from anywhere, only allow Redis connections from 1.2.3.4:\r\n    $ overcast expose redis 22 6379 --whitelist-6379 \"1.2.3.4\"\r\n    # Only allow SSH and MySQL connections from 1.2.3.4 or from 5.6.7.xxx:\r\n    $ overcast expose mysql 22 3306 --whitelist \"1.2.3.4 5.6.7.0/24\"\r\n```\r\n\r\n### overcast exposed\r\n\r\n```\r\n  overcast exposed [instance|cluster|all]\r\n    List the exposed ports on the instance or cluster.\r\n    Expects an Ubuntu server, untested on other distributions.\r\n\r\n      Option        | Default\r\n      --user NAME   |\r\n```\r\n\r\n### overcast health\r\n\r\n```\r\n  overcast health [instance|cluster|all]\r\n    Export common health statistics in JSON format.\r\n    Expects an Ubuntu server, untested on other distributions.\r\n\r\n    Example JSON:\r\n    {\r\n      \"my_instance_name\": {\r\n        \"cpu_1min\": 0.53,\r\n        \"cpu_5min\": 0.05,\r\n        \"cpu_15min\": 0.10,\r\n        \"disk_total\": 19592,     // in MB\r\n        \"disk_used\": 13445,      // in MB\r\n        \"disk_free\": 5339,       // in MB\r\n        \"mem_total\": 1000,       // in MB\r\n        \"mem_used\": 904,         // in MB\r\n        \"mem_free\": 96,          // in MB\r\n        \"cache_used\": 589,       // in MB\r\n        \"cache_free\": 410,       // in MB\r\n        \"swap_total\": 255,       // in MB\r\n        \"swap_used\": 124,        // in MB\r\n        \"swap_free\": 131,        // in MB\r\n        \"tcp\": 152,              // open TCP connections\r\n        \"rx_bytes\": 196396703,   // total bytes received\r\n        \"tx_bytes\": 47183785,    // total bytes transmitted\r\n        \"io_reads\": 1871210,     // total bytes read\r\n        \"io_writes\": 6446448,    // total bytes written\r\n        \"processes\": [\r\n          {\r\n            \"user\": \"root\",\r\n            \"pid\": 1,\r\n            \"cpu%\": 0,\r\n            \"mem%\": 0,\r\n            \"time\": \"0:01\",\r\n            \"command\": \"/sbin/init\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n```\r\n\r\n### overcast help\r\n\r\n```\r\n  Overcast v0.2.1\r\n\r\n  Code repo, issues, pull requests:\r\n    https://github.com/andrewchilds/overcast\r\n\r\n  Usage:\r\n    overcast [command] [options...]\r\n\r\n  Help:\r\n    overcast help\r\n    overcast help [command]\r\n    overcast [command] help\r\n\r\n  Commands:\r\n    overcast cluster list\r\n    overcast cluster count [name]\r\n    overcast cluster create [name]\r\n    overcast cluster rename [name] [new-name]\r\n    overcast cluster remove [name]\r\n    overcast completions\r\n    overcast digitalocean create [instance] [options]\r\n    overcast digitalocean destroy [instance]\r\n    overcast digitalocean droplets\r\n    overcast digitalocean images\r\n    overcast digitalocean poweron [instance]\r\n    overcast digitalocean reboot [instance]\r\n    overcast digitalocean rebuild [instance] [options]\r\n    overcast digitalocean regions\r\n    overcast digitalocean resize\r\n    overcast digitalocean sizes\r\n    overcast digitalocean shutdown [instance]\r\n    overcast digitalocean snapshot [instance] [snapshot-name]\r\n    overcast digitalocean snapshots\r\n    overcast expose [instance|cluster|all] [port...] [options]\r\n    overcast exposed [instance|cluster|all]\r\n    overcast health [instance|cluster|all]\r\n    overcast info\r\n    overcast init\r\n    overcast instance get [name] [attr...]\r\n    overcast instance import [name] [options]\r\n    overcast instance list [cluster...]\r\n    overcast instance remove [name]\r\n    overcast instance update [name] [options]\r\n    overcast list\r\n    overcast ping [instance|cluster|all]\r\n    overcast port [instance|cluster|all] [port]\r\n    overcast pull [instance|cluster|all] [source] [dest]\r\n    overcast push [instance|cluster|all] [source] [dest]\r\n    overcast run [instance|cluster|all] [command...]\r\n    overcast run [instance|cluster|all] [file...]\r\n    overcast ssh [instance]\r\n\r\n  Config directory:\r\n    /path/to/.overcast\r\n```\r\n\r\n### overcast info\r\n\r\n```\r\n  overcast info\r\n    Pretty-prints the complete clusters.json file, stored here:\r\n    /path/to/.overcast/clusters.json\r\n```\r\n\r\n### overcast init\r\n\r\n```\r\n  overcast init\r\n    Create an .overcast config directory in the current working directory.\r\n    No action taken if one already exists.\r\n```\r\n\r\n### overcast instance\r\n\r\n```\r\n  overcast instance get [name] [attr...]\r\n    Returns the instance attribute(s), one per line.\r\n\r\n    Examples:\r\n    $ overcast instance get app.01 ssh-port ip\r\n    > 22\r\n    > 127.0.0.1\r\n    $ overcast instance get app.01 user\r\n    > appuser\r\n\r\n  overcast instance import [name] [options]\r\n    Imports an existing instance to a cluster.\r\n\r\n      Option               | Default\r\n      --cluster CLUSTER    |\r\n      --ip IP              |\r\n      --ssh-port PORT      | 22\r\n      --ssh-key PATH       | .overcast/keys/overcast.key\r\n      --user USERNAME      | root\r\n\r\n    Example:\r\n    $ overcast instance import app.01 --cluster app --ip 127.0.0.1 \\\r\n        --ssh-port 22222 --ssh-key $HOME/.ssh/id_rsa\r\n\r\n  overcast instance list [cluster...]\r\n    Returns all instance names, one per line. Optionally limit to one or more clusters.\r\n\r\n    Examples:\r\n    $ overcast instance list\r\n    $ overcast instance list app-cluster db-cluster\r\n\r\n  overcast instance remove [name]\r\n    Removes an instance from the index.\r\n    The server itself is not affected by this action.\r\n\r\n    Example:\r\n    $ overcast instance remove app.01\r\n\r\n  overcast instance update [name] [options]\r\n    Update any instance property. Specifying --cluster will move the instance to\r\n    that cluster. Specifying --name will rename the instance.\r\n\r\n      Option               | Default\r\n      --name NAME          |\r\n      --cluster CLUSTER    |\r\n      --ip IP              |\r\n      --ssh-port PORT      |\r\n      --ssh-key PATH       |\r\n      --user USERNAME      |\r\n\r\n    Example:\r\n    $ overcast instance update app.01 --user differentuser --ssh-key /path/to/another/key\r\n```\r\n\r\n### overcast list\r\n\r\n```\r\n  overcast list\r\n    Short list of your cluster and instance definitions, stored here:\r\n    /path/to/.overcast/clusters.json\r\n```\r\n\r\n### overcast ping\r\n\r\n```\r\n  overcast ping [instance|cluster|all]\r\n    Ping an instance or cluster.\r\n\r\n      Option    | Default\r\n      --count N | 3\r\n\r\n    Examples:\r\n    $ overcast ping app.01\r\n    $ overcast ping db --count 5\r\n```\r\n\r\n### overcast port\r\n\r\n```\r\n  overcast port [instance|cluster|all] [port]\r\n    Change the SSH port for an instance or a cluster.\r\n    This command will fail if the new port is not opened by iptables.\r\n\r\n    Examples:\r\n    $ overcast port app.01 22222\r\n    $ overcast port db 22222\r\n```\r\n\r\n### overcast pull\r\n\r\n```\r\n  overcast pull [instance|cluster|all] [source] [dest]\r\n    Pull a file or directory from an instance or cluster using scp. Source is absolute.\r\n    Destination can be absolute or relative to the .overcast/files directory.\r\n\r\n    Any reference to {instance} in the destination will be replaced with the instance name.\r\n\r\n      Option\r\n      --user NAME\r\n\r\n    Example:\r\n    Assuming instances \"app.01\" and \"app.02\", this will expand to:\r\n      - .overcast/files/nginx/app.01.myapp.conf\r\n      - .overcast/files/nginx/app.02.myapp.conf\r\n    $ overcast pull app /etc/nginx/sites-enabled/myapp.conf nginx/{instance}.myapp.conf\r\n```\r\n\r\n### overcast push\r\n\r\n```\r\n  overcast push [instance|cluster|all] [source] [dest]\r\n    Push a file or directory to an instance or cluster using scp. Source can be\r\n    absolute, or relative to the .overcast/files directory. Destination is absolute.\r\n\r\n    Any reference to {instance} in the source will be replaced with the instance name.\r\n\r\n      Option\r\n      --user NAME\r\n\r\n    Example:\r\n    Assuming instances \"app.01\" and \"app.02\", this will expand to:\r\n      - .overcast/files/nginx/app.01.myapp.conf\r\n      - .overcast/files/nginx/app.02.myapp.conf\r\n    $ overcast push app nginx/{instance}.myapp.conf /etc/nginx/sites-enabled/myapp.conf\r\n```\r\n\r\n### overcast run\r\n\r\n```\r\n  overcast run [instance|cluster|all] [command...]\r\n    Runs a command or series of commands on an instance or cluster.\r\n    Commands will run sequentially unless you use the --parallel flag,\r\n    in which case each command will run on all instances simultanously.\r\n\r\n      Option                          | Default\r\n      --env \"KEY=VAL KEY='1 2 3'\"     |\r\n      --user NAME                     |\r\n      --ssh-key PATH                  |\r\n      --parallel -p                   | false\r\n      --continueOnError               | false\r\n\r\n    Examples:\r\n    $ overcast run app --env \"foo='bar bar' testing=123\" env\r\n    $ overcast run all uptime \"free -m\" \"df -h\"\r\n\r\n  overcast run [instance|cluster|all] [file...]\r\n    Executes a script file or files on an instance or cluster.\r\n    Script files can be either absolute or relative path.\r\n    Script files will run sequentially unless you use the --parallel flag,\r\n    in which case each file will execute on all instances simultanously.\r\n\r\n      Option                          | Default\r\n      --env \"KEY=VAL KEY='1 2 3'\"     |\r\n      --user NAME                     |\r\n      --ssh-key PATH                  |\r\n      --shell-command \"COMMAND\"       | bash -s\r\n      --parallel -p                   | false\r\n      --continueOnError               | false\r\n\r\n    Relative paths are relative to the cwd, or to these directories:\r\n    /path/to/.overcast/scripts\r\n    /path/to/installed/overcast/scripts\r\n\r\n    Example:\r\n    $ overcast run db install/core install/redis\r\n```\r\n\r\n### overcast ssh\r\n\r\n```\r\n  overcast ssh [instance]\r\n    Opens an SSH connection to an instance.\r\n\r\n    Option\r\n    --ssh-key PATH\r\n    --user NAME\r\n```\r\n\r\n## Design Goals &amp; Motivation\r\n\r\nThere are a lot of server management frameworks out there already (Chef, Puppet, Ansible, Salt), but they all involve either a complex server-client implementation, a steep learning curve or a giant, monolithic conceptual framework that requires taking a course to understand.\r\n\r\nI wanted something that had little to no learning curve, that just focused on multi-server provisioning and communication and leaves problems like process/state management and system monitoring to tools designed specifically for those problems (Monit, Munin, Nagios, etc).\r\n\r\n## Running the Tests\r\n\r\n[![Build Status](https://travis-ci.org/andrewchilds/overcast.svg?branch=master)](https://travis-ci.org/andrewchilds/overcast)\r\n\r\n```sh\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Upgrading Overcast\r\n\r\n```sh\r\nnpm -g update overcast\r\n```\r\n\r\nConfiguration files are left alone during an upgrade.\r\n\r\n## Contributing\r\n\r\nContributions are very welcome. If you've got an idea for a feature or found a bug, please [open an issue](https://github.com/andrewchilds/overcast/issues). If you're a developer and want to help make Overcast better, [open a pull request](https://github.com/andrewchilds/overcast/pulls) with your changes.\r\n\r\n## Roadmap\r\n\r\n- Linode support\r\n- AWS EC2 support\r\n- Better test coverage\r\n- Improved script library bundle\r\n\r\n## License\r\n\r\nMIT. Copyright &copy; 2014 [Andrew Childs](http://twitter.com/andrewchilds).\r\n","google":"UA-2103966-3","note":"Don't delete this file! It's used internally to help with page regeneration."}