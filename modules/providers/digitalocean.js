var fs = require('fs');
var querystring = require('querystring');
var _ = require('lodash');
var cp = require('child_process');
var utils = require('../utils');

var API_URL = 'https://api.digitalocean.com/';
var OVERCAST_KEY_NAME = 'overcast-autogenerated-key';

exports.debug = false;

exports.getOvercastKeyID = function (callback) {
  var variables = utils.getVariables();

  if (variables.DIGITALOCEAN_OVERCAST_KEY_ID) {
    callback(variables.DIGITALOCEAN_OVERCAST_KEY_ID);
  } else {
    exports.getKeys(function (keys) {
      var key = _.find(keys, {
        name: OVERCAST_KEY_NAME
      });
      if (key) {
        callback(key.id);
      } else {
        exports.createKey(function (key) {
          callback(key.id);
        });
      }
    });
  }
};

exports.getKeys = function (callback) {
  exports.request({
    endpoint: 'ssh_keys',
    callback: function (result) {
      if (result && result.ssh_keys) {
        callback(result.ssh_keys);
      }
    }
  });
};

exports.createKey = function (callback) {
  // GET https://api.digitalocean.com/ssh_keys/new/
  //   ?name=[ssh_key_name]
  //   &ssh_pub_key=[ssh_public_key]
  //   &client_id=[client_id]
  //   &api_key=[api_key]

  var ssh_pub_key = fs.readFileSync(utils.CONFIG_DIR + '/keys/overcast.key.pub', 'utf8');

  exports.request({
    endpoint: 'ssh_keys/new',
    query: {
      name: OVERCAST_KEY_NAME,
      ssh_pub_key: ssh_pub_key + ''
    },
    callback: function (result) {
      if (result && result.ssh_key) {
        var variables = utils.getVariables();
        variables.DIGITALOCEAN_OVERCAST_KEY_ID = result.ssh_key.id;
        utils.saveVariables(variables);
        callback(result.ssh_key);
      }
    }
  });
};

exports.getRegions = function (callback) {
  exports.request({
    endpoint: 'regions',
    callback: function (result) {
      if (result && result.regions) {
        callback(_.compact(_.pluck(result.regions, 'slug')));
      }
    }
  });
};

exports.getSizes = function (callback) {
  exports.request({
    endpoint: 'sizes',
    callback: function (result) {
      if (result && result.sizes) {
        callback(_.compact(_.pluck(result.sizes, 'slug')));
      }
    }
  });
};

exports.getImages = function (callback) {
  exports.request({
    endpoint: 'images',
    callback: function (result) {
      if (result && result.images) {
        callback(_.compact(_.pluck(result.images, 'slug')));
      }
    }
  });
};

exports.getDroplet = function (id, callback) {
  // GET https://api.digitalocean.com/droplets/[droplet_id]
  //   ?client_id=[client_id]
  //   &api_key=[api_key]

  exports.request({
    endpoint: 'droplets/' + id,
    callback: function (result) {
      if (result && result.droplet) {
        callback(result.droplet);
      }
    }
  });
};

exports.create = function (options) {
  // GET https://api.digitalocean.com/droplets/new
  //   ?client_id=[client_id]
  //   &api_key=[api_key]
  //   &name=[droplet_name]
  //   &size_slug=[size_slug]
  //   &image_slug=[image_slug]
  //   &region_slug=[region_slug]
  //   &ssh_key_ids=[ssh_key_id1]

  var instance = {
    name: options.name || 'overcast.instance.' + _.now(),
    provider: 'digitalocean',
    size: options.size || '512mb',
    ssh_key: options.ssh_key || utils.CONFIG_DIR + '/keys/overcast.key',
    ssh_port: 22,
    image: options.image || 'ubuntu-12-04-x64',
    region: options.region || 'nyc2'
  };

  var clusters = utils.getClusters();
  clusters[options.cluster] = clusters[options.cluster] || {};
  clusters[options.cluster].instances[options.name] = instance;
  utils.saveClusters(clusters);

  exports.getOvercastKeyID(function (keyID) {
    exports.request({
      endpoint: 'droplets/new',
      query: {
        name: instance.name,
        size_slug: instance.size,
        image_slug: instance.image,
        region_slug: instance.region,
        ssh_key_ids: keyID
      },
      callback: function (result) {
        if (result && result.droplet) {
          utils.success('Starting to create instance ' + result.droplet.id + '.');
          utils.success('This could take a minute, please wait...');
          exports.waitForInstanceCreation(result.droplet);
        }
      }
    });
  });
};

exports.waitForInstanceCreation = function (droplet) {
  exports.request({
    endpoint: 'events/' + droplet.event_id,
    callback: function (result) {
      if (result && result.event) {
        if (result.event.action_status === 'done') {
          utils.progressComplete();
          utils.success('Instance created!');
          utils.note('Waiting 60 seconds for server to boot up...');
          exports.waitForServerBoot(droplet);
        } else {
          utils.progress(result.event.percentage);
          setTimeout(function () {
            exports.waitForInstanceCreation(droplet);
          }, 1000);
        }
      }
    }
  });
};

exports.waitForServerBoot = function (droplet, percentage) {
  percentage = percentage || 0;
  if (percentage < 100) {
    utils.progress(percentage);
    setTimeout(function () {
      exports.waitForServerBoot(droplet, percentage + 2);
    }, 1200);
  } else {
    utils.progressComplete();
    exports.getDroplet(droplet.id, function (droplet) {
      utils.updateInstance(droplet.name, { ip: droplet.ip_address });
      utils.success('Instance "' + droplet.name + '" (' + droplet.ip_address + ') saved!');
    });
  }
};

// request({
//   endpoint: 'droplets/new',
//   type: 'GET',
//   query: { client_id: 'abc123', api_key: 'abc123', ... },
//   data: {},
//   callback: function (stderr, stdout) {}
// });
exports.request = function (options) {
  var variables = utils.getVariables();
  options.query = options.query || {};
  options.query.client_id = variables.DIGITALOCEAN_CLIENT_ID;
  options.query.api_key = variables.DIGITALOCEAN_API_KEY;

  if (!variables.DIGITALOCEAN_CLIENT_ID || !variables.DIGITALOCEAN_API_KEY) {
    utils.red('Missing DIGITALOCEAN_CLIENT_ID and DIGITALOCEAN_API_KEY values.');
    utils.red('Please add them to ' + utils.VARIABLES_JSON);
    process.exit(1);
  }

  var args = constructCurlArgs(options);

  if (exports.debug) {
    console.log('curl ' + args.join(' '));
  }

  var curl = cp.spawn('curl', args);
  var stderr = null;
  var stdout = '';

  curl.stdout.on('data', function (data) {
    stdout += data;
  });

  curl.stderr.on('data', function (data) {
    stderr += data;
  });

  curl.on('close', function (code) {
    if (code !== 0) {
      utils.die('Got a non-zero exit code from DigitalOcean API (' + code + ').');
    }

    try {
      stdout = JSON.parse(stdout);
    } catch (e) {
      utils.die('Exception thrown while parsing DigitalOcean API output: ' + stdout);
    }

    if (exports.debug) {
      console.log(JSON.stringify(stdout, null, 4));
    }

    if (_.isFunction(options.callback)) {
      if (stdout && stdout.status && stdout.status === 'ERROR') {
        utils.die('Error response from API: ' + stdout.error_message);
      } else if (stdout && stdout.status === 'OK') {
        options.callback(stdout);
      } else {
        utils.die('Error response from API: ' + stderr);
      }
    }
  });
};

function constructCurlArgs(options) {
  var url = API_URL + options.endpoint + '?' + querystring.stringify(options.query || {});
  var args = ['-s', '-X', options.type || 'GET'];

  if (options.data) {
    args.push('-d', JSON.stringify(options.data));
  }
  args.push(url);

  return args;
}
